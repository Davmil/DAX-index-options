%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%           Modellpreise                %%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cd C:\Users\David\Documents\Bachelorarbeit\main;
% cd C:\Users\Pomian\Documents\Bachelorarbeit\main;
run('BA_0c_Vol_Est.m')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                        Historical Volatility 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mdlprc_c = mydatc(:,[1 11 2]);
mdlprc_c = join(mdlprc_c,daxVals(:,[1 4 5 6 7 8 9 10]), 'Keys', 'Date');

mdlprc_p = mydatp(:,[1 11 2]);
mdlprc_p = join(mdlprc_p,daxVals(:,[1 4 5 6 7 8 9 10]), 'Keys', 'Date');

% Calculate model prices:
% Calls
mdlprc_c.vol20 = bs_price(mydatc.DAX,mydatc.Strike, ...
                           mydatc.EONIA,mydatc.Time_to_Maturity, ...
                           mdlprc_c.vol20);
                       
mdlprc_c.vol40 = bs_price(mydatc.DAX,mydatc.Strike, ...
                           mydatc.EONIA,mydatc.Time_to_Maturity, ...
                           mdlprc_c.vol40);
                       
mdlprc_c.vol60 = bs_price(mydatc.DAX,mydatc.Strike, ...
                           mydatc.EONIA,mydatc.Time_to_Maturity, ...
                           mdlprc_c.vol60);
                       
mdlprc_c.vol80 = bs_price(mydatc.DAX,mydatc.Strike, ...
                           mydatc.EONIA,mydatc.Time_to_Maturity, ...
                           mdlprc_c.vol80);                       
                       
mdlprc_c.vol120 = bs_price(mydatc.DAX,mydatc.Strike, ...
                           mydatc.EONIA,mydatc.Time_to_Maturity, ...
                           mdlprc_c.vol120);     

mdlprc_c.vol180 = bs_price(mydatc.DAX,mydatc.Strike, ...
                           mydatc.EONIA,mydatc.Time_to_Maturity, ...
                           mdlprc_c.vol180);  
                       
mdlprc_c.vol255 = bs_price(mydatc.DAX,mydatc.Strike, ...
                           mydatc.EONIA,mydatc.Time_to_Maturity, ...
                           mdlprc_c.vol255);  

% Puts
mdlprc_p.vol20 = bs_price(mydatp.DAX,mydatp.Strike, ...
                           mydatp.EONIA,mydatp.Time_to_Maturity, ...
                           mdlprc_p.vol20);
                       
mdlprc_p.vol40 = bs_price(mydatp.DAX,mydatp.Strike, ...
                           mydatp.EONIA,mydatp.Time_to_Maturity, ...
                           mdlprc_p.vol40);
                       
mdlprc_p.vol60 = bs_price(mydatp.DAX,mydatp.Strike, ...
                           mydatp.EONIA,mydatp.Time_to_Maturity, ...
                           mdlprc_p.vol60);
                       
mdlprc_p.vol80 = bs_price(mydatp.DAX,mydatp.Strike, ...
                           mydatp.EONIA,mydatp.Time_to_Maturity, ...
                           mdlprc_p.vol80);                       
                       
mdlprc_p.vol120 = bs_price(mydatp.DAX,mydatp.Strike, ...
                           mydatp.EONIA,mydatp.Time_to_Maturity, ...
                           mdlprc_p.vol120);     

mdlprc_p.vol180 = bs_price(mydatp.DAX,mydatp.Strike, ...
                           mydatp.EONIA,mydatp.Time_to_Maturity, ...
                           mdlprc_p.vol180);  
                       
mdlprc_p.vol255 = bs_price(mydatp.DAX,mydatp.Strike, ...
                           mydatp.EONIA,mydatp.Time_to_Maturity, ...
                           mdlprc_p.vol255);    
                       
% save mdlprc_c mdlprc_c; save mdlprc_p mdlprc_p;
% load mdlprc_c; load mdlprc_p;




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                              GARCH(1,1) Volatility Model
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Xa=find(strcmp(mydatc.Date,'2006-07-04')); % erster Tag f채llt wegen log returns aus

mdlprcG_c = mydatc(Xa(1):end,[1 11 2]);
mdlprcG_c = join(mdlprcG_c,garch_vol, 'Keys', 'Date');

Xb=find(strcmp(mydatp.Date,'2006-07-04')); % erster Tag f채llt wegen log returns aus
mdlprcG_p = mydatp(Xb(1):end,[1 11 2]);
mdlprcG_p = join(mdlprcG_p,garch_vol, 'Keys', 'Date');


mdlprcG_c.Ext = bs_price(mydatc.DAX(Xa(1):end),mydatc.Strike(Xa(1):end), ...
                           mydatc.EONIA(Xa(1):end), ...
                           mydatc.Time_to_Maturity(Xa(1):end), ...
                           mdlprcG_c.Ext);
                       
mdlprcG_c.Mov = bs_price(mydatc.DAX(Xa(1):end),mydatc.Strike(Xa(1):end), ...
                           mydatc.EONIA(Xa(1):end),mydatc.Time_to_Maturity(Xa(1):end), ...
                           mdlprcG_c.Mov);
                       
mdlprcG_p.Ext = bs_price(mydatp.DAX(Xa(1):end),mydatp.Strike(Xa(1):end), ...
                           mydatp.EONIA(Xa(1):end), ...
                           mydatp.Time_to_Maturity(Xa(1):end), ...
                           mdlprcG_p.Ext);
                       
mdlprcG_p.Mov = bs_price(mydatp.DAX(Xa(1):end),mydatp.Strike(Xa(1):end), ...
                           mydatp.EONIA(Xa(1):end),mydatp.Time_to_Maturity(Xa(1):end), ...
                           mdlprcG_p.Mov);                       
                       




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                        Implied Volatility 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Determine the Pricing Error with Implied Volatility
% Calls
prcingerrorImplVola_calls= calls(:,1);

for i=1:length(calls.ID)
    option = test(strcmp(test.ID,calls.ID(i)),:);
        
    St   = option.DAX(2:end);
    K    = option.Strike(2:end);
    r    = option.EONIA(2:end);
    T    = option.Time_to_Maturity(2:end);
    ImplVola  = option.ImplVola(1:end-1);

    compare(:,1) = option.Price(2:end);
    % Compare the market option prices with the bls prices with ImpliedVola
    compare(:,2) = bs_price(St,K,r,T,ImplVola);
 
    % Relative Pricing Error

    comperr2(:,1) = (compare(:,1) - compare(:,2))./compare(:,2);    
    relprcerror(i,1) = mean(comperr2(:,1)); % Mittlerer Fehler f체r jede Call-Option in ihrer gesamten Laufzeit

    clearvars comperr2 compare
end  
    prcingerrorImplVola_calls = [ prcingerrorImplVola_calls table(relprcerror) ];
    prcingerrorImplVola_calls.Properties.VariableNames = {'ID' 'prcerrorImplVola'};
    save prcingerrorImplVola_calls prcingerrorImplVola_calls;
%%
eliImpl = prcingerrorImplVola_calls(any(prcingerrorImplVola_calls.prcerrorImplVola > 1 | isnan(prcingerrorImplVola_calls.prcerrorImplVola), 2),1:2);
prcingerrorImplVola_calls(any(prcingerror_puts.prcerror60 > 1,2),:) = [];

%% % Puts

prcingerrorImplVola_puts= puts(:,1);

for i=1:length(puts.ID)
    option = putopt(strcmp(putopt.ID,puts.ID(i)),:);
     
    
    St   = option.DAX(2:end);
    K    = option.Strike(2:end);
    r    = option.EONIA(2:end);
    T    = option.Time_to_Maturity(2:end);
    ImplVola  = option.ImplVola(1:end-1);

    compare(:,1) = option.Price(2:end);
    % Compare the market option prices with the bls prices with ImpliedVola
    compare(:,2) = bs_price(St,K,r,T,ImplVola);
 
    % Relative Pricing Error

    comperr2(:,1) = (compare(:,1) - compare(:,2))./compare(:,2);    
    relprcerror(i,1) = mean(comperr2(:,1)); % Mittlerer Fehler f체r jede Call-Option in ihrer gesamten Laufzeit
    
    clearvars comperr2 compare
end    
    prcingerrorImplVola_puts.Properties.VariableNames = {'ID' 'prcerrorImplVola'};
    save prcingerrorImplVola_puts prcingerrorImplVola_puts;
    
%% Pricing error seperated into Strike-levels/Time-to-Maturity/Moneyness/Year
